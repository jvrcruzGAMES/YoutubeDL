name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'YoutubeDL' }}
          platform: ${{ 'iOS' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO -configuration Release 

      - name: Get exact build directory
        id: get_paths
        run: |
          BUILD_SETTINGS=$(xcodebuild -project YoutubeDL.xcodeproj -scheme "YoutubeDL" -configuration Release -sdk iphoneos -showBuildSettings)
          export BUILD_DIR=$(echo "$BUILD_SETTINGS" | grep -m 1 "BUILD_DIR" | sed -E 's/^[^=]+=(.*)$/\1/' | xargs)
          export TARGET_BUILD_DIR=$(echo "$BUILD_SETTINGS" | grep -m 1 "TARGET_BUILD_DIR" | sed -E 's/^[^=]+=(.*)$/\1/' | xargs)
          echo "BUILD_DIR=$BUILD_DIR"
          echo "TARGET_BUILD_DIR=$TARGET_BUILD_DIR"
          echo "TARGET_BUILD_DIR=$TARGET_BUILD_DIR" >> $GITHUB_ENV
  
      - name: Export unsigned .app bundle
        run: |
          mkdir Result
          cp -R "$TARGET_BUILD_DIR/YoutubeDL.app" "./Result/YoutubeDL.app"
  
      - name: Archive and upload .app file
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-ios-app
          path: ./result/   
